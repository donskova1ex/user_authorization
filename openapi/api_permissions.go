// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * user_authorization service - OpenAPI 3.0
 *
 * Сервис авторизации пользователей
 *
 * API version: 1.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PermissionsAPIController binds http requests to an api service and writes the service results to the http response
type PermissionsAPIController struct {
	service      PermissionsAPIServicer
	errorHandler ErrorHandler
}

// PermissionsAPIOption for how the controller is set up.
type PermissionsAPIOption func(*PermissionsAPIController)

// WithPermissionsAPIErrorHandler inject ErrorHandler into controller
func WithPermissionsAPIErrorHandler(h ErrorHandler) PermissionsAPIOption {
	return func(c *PermissionsAPIController) {
		c.errorHandler = h
	}
}

// NewPermissionsAPIController creates a default api controller
func NewPermissionsAPIController(s PermissionsAPIServicer, opts ...PermissionsAPIOption) *PermissionsAPIController {
	controller := &PermissionsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PermissionsAPIController
func (c *PermissionsAPIController) Routes() Routes {
	return Routes{
		"PermissionsList": Route{
			strings.ToUpper("Get"),
			"/api/v1/permissions",
			c.PermissionsList,
		},
		"GetPermissionByUUID": Route{
			strings.ToUpper("Get"),
			"/api/v1/permissions/{uuid}",
			c.GetPermissionByUUID,
		},
		"ChangePermissionByUUUID": Route{
			strings.ToUpper("Put"),
			"/api/v1/permissions/{uuid}",
			c.ChangePermissionByUUUID,
		},
		"DeletePermissionByUUUID": Route{
			strings.ToUpper("Delete"),
			"/api/v1/permissions/{uuid}",
			c.DeletePermissionByUUUID,
		},
	}
}

// PermissionsList - Permissions list
func (c *PermissionsAPIController) PermissionsList(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.PermissionsList(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPermissionByUUID - Find permission by uuid
func (c *PermissionsAPIController) GetPermissionByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.GetPermissionByUUID(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ChangePermissionByUUUID - change permission by uuid
func (c *PermissionsAPIController) ChangePermissionByUUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	permissionParam := Permission{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&permissionParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPermissionRequired(permissionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPermissionConstraints(permissionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ChangePermissionByUUUID(r.Context(), uuidParam, permissionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeletePermissionByUUUID - delete permission by uuid
func (c *PermissionsAPIController) DeletePermissionByUUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.DeletePermissionByUUUID(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
