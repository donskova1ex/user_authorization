// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * user_authorization service - OpenAPI 3.0
 *
 * Сервис авторизации пользователей
 *
 * API version: 1.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RolesAPIController binds http requests to an api service and writes the service results to the http response
type RolesAPIController struct {
	service      RolesAPIServicer
	errorHandler ErrorHandler
}

// RolesAPIOption for how the controller is set up.
type RolesAPIOption func(*RolesAPIController)

// WithRolesAPIErrorHandler inject ErrorHandler into controller
func WithRolesAPIErrorHandler(h ErrorHandler) RolesAPIOption {
	return func(c *RolesAPIController) {
		c.errorHandler = h
	}
}

// NewRolesAPIController creates a default api controller
func NewRolesAPIController(s RolesAPIServicer, opts ...RolesAPIOption) *RolesAPIController {
	controller := &RolesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RolesAPIController
func (c *RolesAPIController) Routes() Routes {
	return Routes{
		"RolesList": Route{
			strings.ToUpper("Get"),
			"/api/v1/roles",
			c.RolesList,
		},
		"GetRoleByUUID": Route{
			strings.ToUpper("Get"),
			"/api/v1/roles/{uuid}",
			c.GetRoleByUUID,
		},
		"ChangeRoleByUUUID": Route{
			strings.ToUpper("Put"),
			"/api/v1/roles/{uuid}",
			c.ChangeRoleByUUUID,
		},
		"DeleteRoleByUUUID": Route{
			strings.ToUpper("Delete"),
			"/api/v1/roles/{uuid}",
			c.DeleteRoleByUUUID,
		},
	}
}

// RolesList - Roles list
func (c *RolesAPIController) RolesList(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RolesList(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRoleByUUID - Find role by uuid
func (c *RolesAPIController) GetRoleByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.GetRoleByUUID(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ChangeRoleByUUUID - change role by uuid
func (c *RolesAPIController) ChangeRoleByUUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	roleParam := Role{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&roleParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRoleRequired(roleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRoleConstraints(roleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ChangeRoleByUUUID(r.Context(), uuidParam, roleParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteRoleByUUUID - delete role by uuid
func (c *RolesAPIController) DeleteRoleByUUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.DeleteRoleByUUUID(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
